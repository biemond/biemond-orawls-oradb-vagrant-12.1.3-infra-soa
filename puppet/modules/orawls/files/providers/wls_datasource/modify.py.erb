# check the domain else we need to skip this (done in wls_access.rb)
real_domain='<%= domain %>'


name                       = '<%= datasource_name %>'
target                     = '<%= target %>'
targettype                 = '<%= targettype %>'
drivername                 = '<%= drivername %>'
jndinames                  = '<%= jndinames %>'
url                        = '<%= url %>'
usexa                      = '<%= usexa %>'
user                       = '<%= user %>'
testtablename              = '<%= testtablename %>'
globaltransactionsprotocol = '<%= globaltransactionsprotocol %>'
extraproperties            = '<%= extraproperties %>'
maxcapacity                = '<%= maxcapacity %>'
initialcapacity            = '<%= initialcapacity %>'
fanenabled                 = '<%= fanenabled %>'
onsnodelist                = '<%= onsnodelist %>'

edit()
startEdit()

try:

    cd('/')
    cd('/JDBCSystemResources/' + name + '/JDBCResource/' + name)
    cmo.setName(name)

    cd('/JDBCSystemResources/' + name + '/JDBCResource/' + name + '/JDBCDataSourceParams/' + name )
    if jndinames:
      jndis = String(jndinames).split(",")
      set('JNDINames',jarray.array(jndis, String))

    cd('/JDBCSystemResources/' + name + '/JDBCResource/' + name + '/JDBCDriverParams/' + name )
    cmo.setUrl(url)
    cmo.setDriverName( drivername )
    if usexa == '1':
      cmo.setUseXaDataSourceInterface(true)
    else:
      cmo.setUseXaDataSourceInterface(false)
    #cmo.setPassword(dsPassword)

    cd('/JDBCSystemResources/' + name + '/JDBCResource/' + name + '/JDBCConnectionPoolParams/' + name )
    set('MaxCapacity'    , int(maxcapacity))
    set('InitialCapacity', int(initialcapacity))

    cd('/JDBCSystemResources/' + name + '/JDBCResource/' + name + '/JDBCConnectionPoolParams/' + name )
    cmo.setTestTableName(testtablename)

    cd('/JDBCSystemResources/' + name + '/JDBCResource/' + name + '/JDBCDriverParams/' + name + '/Properties/' + name + '/Properties/user')
    cmo.setValue(user)


    # Remove Existing Properties First
    cd('/JDBCSystemResources/' + name + '/JDBCResource/' + name + '/JDBCDriverParams/' + name + '/Properties/' + name + '/Properties/')
    existing_properties = ls('', returnMap='true')
    for existing_prop in existing_properties:
        if existing_prop.lower() != 'user':
            cmo.destroyProperty(cmo.lookupProperty(existing_prop))

    if extraproperties:
      properties=String(extraproperties).split(",")
      for property in properties:
        propname, val = property.split("=")
        cd('/JDBCSystemResources/' + name + '/JDBCResource/' + name + '/JDBCDriverParams/' + name + '/Properties/' + name )
        try:
          cmo.createProperty(propname)
        except:
          print "already exists"

        cd('/JDBCSystemResources/' + name + '/JDBCResource/' + name + '/JDBCDriverParams/' + name + '/Properties/' + name + '/Properties/'+propname)
        cmo.setValue(val)

    cd('/JDBCSystemResources/' + name + '/JDBCResource/' + name + '/JDBCDataSourceParams/' + name)
    cmo.setGlobalTransactionsProtocol(globaltransactionsprotocol)

    try:
        cd('/JDBCSystemResources/' + name + '/JDBCResource/' + name + '/JDBCOracleParams/' + name )
        if fanenabled == '1':
            cmo.setFanEnabled(true)
        else:
            cmo.setFanEnabled(false)
        cmo.setOnsNodeList(onsnodelist)
    except:
        print "Datasource Driver %s does not support ONS parameters." % drivername

    cd('/SystemResources/' + name )

    targets     = String(target).split(",")
    targettypes = String(targettype).split(",")
    targetList  = []
    for i in range(len(targets)):
      print "target "+targets[i] + " " + targettypes[i]
      targetList.append( ObjectName('com.bea:Name=' + targets[i] + ',Type='+targettypes[i]) )

    set('Targets',jarray.array(targetList, ObjectName))

    save()
    activate()
    print "~~~~COMMAND SUCCESFULL~~~~"

except:
    print "Unexpected error:", sys.exc_info()[0]
    undo('true','y')
    stopEdit('y')
    print "~~~~COMMAND FAILED~~~~"
    raise


