
def quote(text):
  if text:
    return "\"" + str(text).replace("\"", "\"\"") + "\""
  else:
    return ""

m = ls('/SelfTuning',returnMap='true')

f = open("/tmp/wlstScript.out", "w")
print >>f, "name;stuckthreads;target;targettype;domain;minthreadsconstraint;maxthreadsconstraint;capacity;fairsharerequestclass"
for token in m:
        print '___'+token+'___'
        cd('/SelfTuning/'+token)

        n = ls('WorkManagers',returnMap='true')
        for token2 in n:
                cd('/SelfTuning/'+token+'/WorkManagers/'+token2)

                stuckthreads = str(cmo.getIgnoreStuckThreads())

                minThreadsConstraintsMbean = cmo.getMinThreadsConstraint()
                if minThreadsConstraintsMbean:
                   path = getPath(minThreadsConstraintsMbean)
                   cd("/"+path)
                   minThreadsConstraint = get('Name')
                else:
                   minThreadsConstraint = ''

                cd('/SelfTuning/'+token+'/WorkManagers/'+token2)
                maxThreadsConstraintsMbean = cmo.getMaxThreadsConstraint()
                if maxThreadsConstraintsMbean:
                   path = getPath(maxThreadsConstraintsMbean)
                   cd("/"+path)
                   maxThreadsConstraint = get('Name')
                else:
                   maxThreadsConstraint = ''

                cd('/SelfTuning/'+token+'/WorkManagers/'+token2)
                capacitiesmBean = cmo.getCapacity()
                if capacitiesmBean:
                   path = getPath(capacitiesmBean)
                   cd("/"+path)
                   capacity = get('Name')
                else:
                   capacity = ''

                cd('/SelfTuning/'+token+'/WorkManagers/'+token2)
                fairsharemBean = cmo.getFairShareRequestClass()
                if fairsharemBean:
                   path = getPath(fairsharemBean)
                   cd("/"+path)
                   fairshareRequestClass = get('Name')
                else:
                   fairshareRequestClass = ''

                cd('/SelfTuning/'+token+'/WorkManagers/'+token2)
                t = ls('Targets',returnMap='true')
                target     = []
                targetType = []
                for token3 in t:
                        target.append(token3)
                        cd('/SelfTuning/'+token+'/WorkManagers/'+token2+'/Targets/'+token3)
                        targetType.append(get('Type'))

                print >>f, ";".join(map(quote, [domain+'/'+token2,stuckthreads,','.join(target),','.join(targetType),domain,minThreadsConstraint,maxThreadsConstraint,capacity,fairshareRequestClass]))

f.close()
print "~~~~COMMAND SUCCESFULL~~~~"
