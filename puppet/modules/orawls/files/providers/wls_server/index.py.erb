

def quote(text):
	if text:
		return "\"" + str(text).replace("\"", "\"\"") + "\""
	else:
		return ""

cd("/")
m = ls('/Servers',returnMap='true')

f = open("/tmp/wlstScript.out", "w")
print >>f, "name;listenaddress;listenport;ssllistenport;sslenabled;sslhostnameverificationignored;two_way_ssl;client_certificate_enforced;machine;logfilename;log_file_min_size;log_filecount;log_rotate_logon_startup;log_rotationtype;log_number_of_files_limited;tunnelingenabled;log_http_filename;log_http_format;log_http_format_type;log_datasource_filename;classpath;arguments;jsseenabled;domain;custom_identity;custom_identity_keystore_filename;trust_keystore_file;custom_identity_alias;default_file_store;max_message_size"
for token in m:
  print '___'+token+'___'
  cd('/Servers/'+token)
  listenAddress    = get('ListenAddress')
  listenPort       = str(get('ListenPort'))
  max_message_size = str(get('MaxMessageSize'))
  tunnelingenabled = str(get('TunnelingEnabled'))

  if get("KeyStores") == "CustomIdentityAndCustomTrust":
    custom_identity = '1'
  else:
    custom_identity = '0'

  custom_identity_keystore_filename = get("CustomIdentityKeyStoreFileName")
  trust_keystore_file               = get("CustomTrustKeyStoreFileName")

  cd('/Servers/'+token+'/SSL/'+token)
  sslListenPort                     = str(get('ListenPort'))
  sslEnabled                        = str(get('Enabled'))
  sslHostnameVerificationIgnored    = str(get('HostnameVerificationIgnored'))
  two_way_ssl                       = str(get('TwoWaySSLEnabled'))
  client_certificate_enforced       = str(get('ClientCertificateEnforced'))
  jsseEnabled                       = str(get('JSSEEnabled'))

  custom_identity_alias             = get("ServerPrivateKeyAlias")

  cd('/Servers/'+token+'/ServerStart/'+token)
  classpath     = get('ClassPath')
  if classpath == None:
      classpath = ''

  arguments     = get('Arguments')
  if arguments == None:
      arguments = ''

  cd('/Servers/'+token+'/Log/'+token)
  logfilename                 = get('FileName')
  log_rotationtype            = get('RotationType')
  log_rotate_logon_startup    = str(get('RotateLogOnStartup'))
  log_number_of_files_limited = str(get('NumberOfFilesLimited'))
  log_filecount               = str(get('FileCount'))
  log_file_min_size           = str(get('FileMinSize'))

  cd('/Servers/'+token+'/WebServer/'+token+'/WebServerLog/'+token)
  log_http_filename           = get('FileName')
  log_http_format             = get('ELFFields')
  log_http_format_type        = get('LogFileFormat')

  cd('/Servers/'+token+'/DataSource/'+token+'/DataSourceLogFile/'+token)
  log_datasource_filename          = get('FileName')

  cd('/Servers/'+token+'/DefaultFileStore/'+token)
  default_file_store = get('Directory')

  n = ls('/Servers/'+token+'/Machine')
  machine = 'none'
  for token2 in n.split("drw-"):
      token2=token2.strip().lstrip().rstrip()
      if token2:
         machine = token2

  print >>f, ";".join(map(quote, [domain+'/'+token, listenAddress, listenPort, sslListenPort, sslEnabled, sslHostnameVerificationIgnored, two_way_ssl, client_certificate_enforced, machine, logfilename,log_file_min_size,log_filecount,log_rotate_logon_startup,log_rotationtype,log_number_of_files_limited, tunnelingenabled,log_http_filename,log_http_format,log_http_format_type,log_datasource_filename, classpath, arguments,jsseEnabled,domain,custom_identity,custom_identity_keystore_filename,trust_keystore_file,custom_identity_alias,default_file_store,max_message_size]))

f.close()
print "~~~~COMMAND SUCCESFULL~~~~"
