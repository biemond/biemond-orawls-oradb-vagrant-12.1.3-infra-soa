

def createBootPropertiesFile(directoryPath,fileName, username, password):
  serverDir = File(directoryPath)
  bool = serverDir.mkdirs()
  fileNew=open(directoryPath + '/'+fileName, 'w')
  fileNew.write('username=%s\n' % username)
  fileNew.write('password=%s\n' % password)
  fileNew.flush()
  fileNew.close()

def createAdminStartupPropertiesFile(directoryPath, args):
  adminserverDir = File(directoryPath)
  bool = adminserverDir.mkdirs()
  fileNew=open(directoryPath + '/startup.properties', 'w')
  args=args.replace(':','\\:')
  args=args.replace('=','\\=')
  fileNew.write('Arguments=%s\n' % args)
  fileNew.flush()
  fileNew.close()

def createMachine(type, name, address, nodemanager_secure_listener):
  cd('/')
  create(name,type)
  cd(type + '/' + name)
  create(name,'NodeManager')
  cd('NodeManager/' + name)

  if nodemanager_secure_listener == true:
    set('NMType','SSL')
  else:
    set('NMType','Plain')

  set('ListenAddress',address)

def changeDatasource(datasource, username, password, db_url):
  print 'Change datasource '+datasource
  cd('/')
  cd('/JDBCSystemResource/'+datasource+'/JdbcResource/'+datasource+'/JDBCDriverParams/NO_NAME_0')
  set('URL',db_url)
  set('PasswordEncrypted',password)
  cd('Properties/NO_NAME_0/Property/user')
  set('Value',username)
  cd('/')

def changeDatasourceDriver(datasource, username, password, db_url, driver):
  print 'Change datasource '+datasource
  cd('/')
  cd('/JDBCSystemResource/'+datasource+'/JdbcResource/'+datasource+'/JDBCDriverParams/NO_NAME_0')
  set('URL',db_url)
  set('DriverName','oracle.jdbc.OracleDriver')
  set('PasswordEncrypted',password)
  cd('Properties/NO_NAME_0/Property/user')
  set('Value',username)
  cd('/')

def changeDatasourceToXA(datasource):
  print 'Change datasource '+datasource
  cd('/')
  cd('/JDBCSystemResource/'+datasource+'/JdbcResource/'+datasource+'/JDBCDriverParams/NO_NAME_0')
  set('DriverName','oracle.jdbc.xa.client.OracleXADataSource')
  set('UseXADataSourceInterface','True')
  cd('/JDBCSystemResource/'+datasource+'/JdbcResource/'+datasource+'/JDBCDataSourceParams/NO_NAME_0')
  set('GlobalTransactionsProtocol','TwoPhaseCommit')
  cd('/')

def createOPSSDataSource(target, prefix, password, db_url):
  cd('/')
  create('opssDataSource', 'JDBCSystemResource')
  cd('/JDBCSystemResource/opssDataSource')
  set('Target',target)

  cd('/JDBCSystemResource/opssDataSource/JdbcResource/opssDataSource')
  cmo.setName('opssDataSource')

  cd('/JDBCSystemResource/opssDataSource/JdbcResource/opssDataSource')
  create('myJdbcDataSourceParams','JDBCDataSourceParams')
  cd('JDBCDataSourceParams/NO_NAME_0')
  set('JNDIName', 'jdbc/opssDataSource')
  set('GlobalTransactionsProtocol', 'None')

  cd('/JDBCSystemResource/opssDataSource/JdbcResource/opssDataSource')
  create('myJdbcDriverParams','JDBCDriverParams')
  cd('JDBCDriverParams/NO_NAME_0')
  set('DriverName','oracle.jdbc.OracleDriver')
  set('URL',db_url)
  set('PasswordEncrypted',password)
  set('UseXADataSourceInterface', 'false')

  create('myProperties','Properties')
  cd('Properties/NO_NAME_0')
  create('user','Property')
  cd('Property')
  cd('user')
  set('Value', prefix + '_OPSS')

  cd('/JDBCSystemResource/opssDataSource/JdbcResource/opssDataSource')
  create('myJdbcConnectionPoolParams','JDBCConnectionPoolParams')
  cd('JDBCConnectionPoolParams/NO_NAME_0')
  set('TestTableName','SQL SELECT 1 FROM DUAL')

def changeLog(type, name, log_folder):
  if type == 'server':
    cd('/Server/'+name)
    create(name,'Log')
    cd('/Server/' + name + '/Log/' + name)
  else:
    cd('/')
    create('base_domain','Log')
    cd('/Log/base_domain')

  set('FileName',log_folder + '/' + name +'.log')
  set('FileCount'   ,10)
  set('FileMinSize' ,5000)
  set('RotationType','byTime')
  set('FileTimeSpan',24)

def changeSSLwithPort(server, jsse_enabled, ssl_listen_port):
  cd('/Server/'+server)
  create(server,'SSL')
  cd('SSL/'+server)
  set('HostNameVerificationIgnored', 'True')

  if ssl_listen_port:
    set('Enabled'   , 'True')
    set('ListenPort', int(ssl_listen_port))
  else:
    set('Enabled'   , 'False')

  if jsse_enabled == true:
    set('JSSEEnabled','True')
  else:
    set('JSSEEnabled','False')

def changeSSL(server, jsse_enabled):
  changeSSLwithPort(server, jsse_enabled, None)

def changeServerArguments(server, java_arguments):
  print "changeDefaultServerAttributes for server " + server
  cd('/Servers/' + server)
  cd('ServerStart/' + server)
  set('Arguments' , java_arguments)

def changeDefaultServerAttributes(server, machine, address, port, java_arguments, java_home):
  print "changeDefaultServerAttributes for server " + server
  cd('/Servers/' + server)

  if machine:
    set('Machine', machine)
  if address:
    set('ListenAddress', address)
  if port:
    set('ListenPort', port)

  create(server, 'ServerStart')
  cd('ServerStart/' + server)
  set('Arguments' , java_arguments)
  set('JavaVendor', 'Sun')
  set('JavaHome'  , java_home)

def changeManagedServer(server, machine, address, port, java_arguments, log_folder, java_home, jsse_enabled):
  changeDefaultServerAttributes(server, machine, address, port, java_arguments, java_home)
  changeSSL(server, jsse_enabled)
  changeLog('server', server, log_folder)

def changeAdminServer(adminserver, machine, address, port, java_arguments, java_home):
  cd('/Servers/AdminServer')
  set('Name',adminserver )
  changeDefaultServerAttributes(adminserver, machine, address, port, java_arguments, java_home)

def changeCustomIdentityStore(server, ks_filename, ks_passphrase, trust_ks_filename, trust_ks_passphrase, alias, alias_passphrase):
  print('Set custom identity')
  cd('/Server/'+server)
  set('KeyStores'                                ,'CustomIdentityAndCustomTrust')
  set('CustomIdentityKeyStoreFileName'           ,ks_filename)
  set('CustomIdentityKeyStorePassPhraseEncrypted',ks_passphrase)
  set('CustomTrustKeyStoreFileName'              ,trust_ks_filename)
  set('CustomTrustKeyStorePassPhraseEncrypted'   ,trust_ks_passphrase)
  cd('SSL/'+server)
  set('ServerPrivateKeyAlias'                    ,alias)
  set('ServerPrivateKeyPassPhraseEncrypted'      ,alias_passphrase)

def setDomainPassword(domain,password,adminUser):
  print('set domain password...')
  cd('/SecurityConfiguration/'+domain)
  set('CredentialEncrypted', password)
  print('Set nodemanager password')
  set('NodeManagerUsername', adminUser)
  set('NodeManagerPasswordEncrypted', password)

def setWebLogicPassword(user,password):
  print('Set password...')
  cd('/')
  cd('Security/base_domain/User/weblogic')
  # weblogic user name + password
  set('Name',user)
  cmo.setPassword(password)

def setCrossDomain():
  print('Set crossdomain')
  create('base_domain','SecurityConfiguration')
  cd('/SecurityConfiguration/base_domain')
  set('CrossDomainSecurityEnabled',true)
